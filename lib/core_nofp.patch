diff -rub core_patched/clone.rs core_patched/clone.rs
--- core_patched/clone.rs	2015-11-01 10:21:11.564916540 +1100
+++ core_patched/clone.rs	2015-11-01 10:21:02.027603292 +1100
@@ -80,7 +80,9 @@
 clone_impl! { u32 }
 clone_impl! { u64 }
 
+#[cfg(not(feature = "disable_float"))]
 clone_impl! { f32 }
+#[cfg(not(feature = "disable_float"))]
 clone_impl! { f64 }
 
 clone_impl! { () }
diff -rub core_patched/default.rs core_patched/default.rs
--- core_patched/default.rs	2015-11-01 10:21:11.564916540 +1100
+++ core_patched/default.rs	2015-11-01 10:21:02.027603292 +1100
@@ -155,5 +155,7 @@
 default_impl! { i32, 0 }
 default_impl! { i64, 0 }
 
+#[cfg(not(feature = "disable_float"))]
 default_impl! { f32, 0.0f32 }
+#[cfg(not(feature = "disable_float"))]
 default_impl! { f64, 0.0f64 }
Only in core_patched/: default.rs.orig
diff -rub core_patched/fmt/mod.rs core_patched/fmt/mod.rs
--- core_patched/fmt/mod.rs	2015-11-01 10:21:11.568918771 +1100
+++ core_patched/fmt/mod.rs	2015-11-01 10:21:02.027603292 +1100
@@ -17,6 +17,7 @@
 use cell::{Cell, RefCell, Ref, RefMut, BorrowState};
 use marker::PhantomData;
 use mem;
+#[cfg(not(feature = "disable_float"))]
 use num::flt2dec;
 use ops::Deref;
 use result;
@@ -1006,6 +1007,7 @@
     /// Takes the formatted parts and applies the padding.
     /// Assumes that the caller already has rendered the parts with required precision,
     /// so that `self.precision` can be ignored.
+    #[cfg(not(feature = "disable_float"))]
     fn pad_formatted_parts(&mut self, formatted: &flt2dec::Formatted) -> Result {
         if let Some(mut width) = self.width {
             // for the sign-aware zero padding, we render the sign first and
@@ -1042,6 +1044,7 @@
         }
     }
 
+    #[cfg(not(feature = "disable_float"))]
     fn write_formatted_parts(&mut self, formatted: &flt2dec::Formatted) -> Result {
         fn write_bytes(buf: &mut Write, s: &[u8]) -> Result {
             buf.write_str(unsafe { str::from_utf8_unchecked(s) })
@@ -1430,6 +1433,7 @@
     }
 }
 
+#[cfg(not(feature = "disable_float"))]
 // Common code of floating point Debug and Display.
 fn float_to_decimal_common<T>(fmt: &mut Formatter, num: &T, negative_zero: bool) -> Result
     where T: flt2dec::DecodableFloat
@@ -1454,6 +1458,7 @@
     fmt.pad_formatted_parts(&formatted)
 }
 
+#[cfg(not(feature = "disable_float"))]
 // Common code of floating point LowerExp and UpperExp.
 fn float_to_exponential_common<T>(fmt: &mut Formatter, num: &T, upper: bool) -> Result
     where T: flt2dec::DecodableFloat
@@ -1507,7 +1512,9 @@
         }
     }
 } }
+#[cfg(not(feature = "disable_float"))]
 floating! { f32 }
+#[cfg(not(feature = "disable_float"))]
 floating! { f64 }
 
 // Implementation of Display/Debug for various core types
Only in core_patched/fmt: mod.rs.orig
diff -rub core_patched/intrinsics.rs core_patched/intrinsics.rs
--- core_patched/intrinsics.rs	2015-11-01 10:21:11.564916540 +1100
+++ core_patched/intrinsics.rs	2015-11-01 10:21:02.027603292 +1100
@@ -412,7 +412,10 @@
     pub fn volatile_load<T>(src: *const T) -> T;
     /// Perform a volatile store to the `dst` pointer.
     pub fn volatile_store<T>(dst: *mut T, val: T);
+}
 
+#[cfg(not(feature = "disable_float"))]
+extern "rust-intrinsic" {
     /// Returns the square root of an `f32`
     pub fn sqrtf32(x: f32) -> f32;
     /// Returns the square root of an `f64`
@@ -509,7 +512,9 @@
     pub fn roundf32(x: f32) -> f32;
     /// Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.
     pub fn roundf64(x: f64) -> f64;
+}
 
+extern "rust-intrinsic" {
     /// Returns the number of bits set in a `u8`.
     pub fn ctpop8(x: u8) -> u8;
     /// Returns the number of bits set in a `u16`.
Only in core_patched/: intrinsics.rs.orig
diff -rub core_patched/lib.rs core_patched/lib.rs
--- core_patched/lib.rs	2015-11-01 10:21:11.568918771 +1100
+++ core_patched/lib.rs	2015-11-01 10:21:02.027603292 +1100
@@ -115,7 +115,9 @@
 #[path = "num/u32.rs"]  pub mod u32;
 #[path = "num/u64.rs"]  pub mod u64;
 
+#[cfg(not(feature = "disable_float"))]
 #[path = "num/f32.rs"]   pub mod f32;
+#[cfg(not(feature = "disable_float"))]
 #[path = "num/f64.rs"]   pub mod f64;
 
 #[macro_use]
@@ -159,6 +161,7 @@
 #[path = "simd_old.rs"]
 pub mod simd;
 #[cfg(not(stage0))]
+#[cfg(not(feature = "disable_float"))]
 pub mod simd;
 
 pub mod slice;
diff -rub core_patched/num/flt2dec/decoder.rs core_patched/num/flt2dec/decoder.rs
--- core_patched/num/flt2dec/decoder.rs	2015-11-01 10:21:11.568918771 +1100
+++ core_patched/num/flt2dec/decoder.rs	2015-11-01 10:21:02.027603292 +1100
@@ -12,6 +12,7 @@
 
 use prelude::v1::*;
 
+#[cfg(not(feature = "disable_float"))]
 use {f32, f64};
 use num::{Float, FpCategory};
 
@@ -57,10 +58,12 @@
     fn min_pos_norm_value() -> Self;
 }
 
+#[cfg(not(feature = "disable_float"))]
 impl DecodableFloat for f32 {
     fn min_pos_norm_value() -> Self { f32::MIN_POSITIVE }
 }
 
+#[cfg(not(feature = "disable_float"))]
 impl DecodableFloat for f64 {
     fn min_pos_norm_value() -> Self { f64::MIN_POSITIVE }
 }
diff -rub core_patched/num/mod.rs core_patched/num/mod.rs
--- core_patched/num/mod.rs	2015-11-01 10:21:11.572921002 +1100
+++ core_patched/num/mod.rs	2015-11-01 10:21:02.027603292 +1100
@@ -46,7 +46,9 @@
 pub mod wrapping;
 
 // All these modules are technically private and only exposed for libcoretest:
+#[cfg(not(feature = "disable_float"))]
 pub mod flt2dec;
+#[cfg(not(feature = "disable_float"))]
 pub mod dec2flt;
 pub mod bignum;
 pub mod diy_float;
@@ -101,6 +103,7 @@
         }
     )*)
 }
+#[cfg(not(feature = "disable_float"))]
 zero_one_impl_float! { f32 f64 }
 
 macro_rules! checked_op {
@@ -1267,6 +1270,7 @@
 #[unstable(feature = "core_float",
            reason = "stable interface is via `impl f{32,64}` in later crates",
            issue = "27702")]
+#[cfg(not(feature = "disable_float"))]
 pub trait Float: Sized {
     /// Returns the NaN value.
     fn nan() -> Self;
@@ -1471,6 +1475,7 @@
     }
 }
 
+#[cfg(not(feature = "disable_float"))]
 pub use num::dec2flt::ParseFloatError;
 
 // Conversion traits for primitive integer and float types
@@ -1519,6 +1524,8 @@
 // they fit in the significand, which is 24 bits in f32 and 53 bits in f64.
 // Lossy float conversions are not implemented at this time.
 
+#[cfg(not(feature = "disable_float"))]
+mod _int_flot_conv {
 // Signed -> Float
 impl_from! { i8, f32 }
 impl_from! { i8, f64 }
@@ -1535,3 +1542,4 @@
 
 // Float -> Float
 impl_from! { f32, f64 }
+}
Only in core_patched/num: mod.rs.orig
diff -rub core_patched/ops.rs core_patched/ops.rs
--- core_patched/ops.rs	2015-11-01 10:21:11.568918771 +1100
+++ core_patched/ops.rs	2015-11-01 10:21:02.031605519 +1100
@@ -203,7 +203,9 @@
     )*)
 }
 
-add_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }
+add_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }
+#[cfg(not(feature = "disable_float"))]
+add_impl! { f32 f64 }
 
 /// The `Sub` trait is used to specify the functionality of `-`.
 ///
@@ -257,7 +259,9 @@
     )*)
 }
 
-sub_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }
+sub_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }
+#[cfg(not(feature = "disable_float"))]
+sub_impl! { f32 f64 }
 
 /// The `Mul` trait is used to specify the functionality of `*`.
 ///
@@ -311,7 +315,9 @@
     )*)
 }
 
-mul_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }
+mul_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }
+#[cfg(not(feature = "disable_float"))]
+mul_impl! { f32 f64 }
 
 /// The `Div` trait is used to specify the functionality of `/`.
 ///
@@ -383,6 +389,7 @@
     )*)
 }
 
+#[cfg(not(feature = "disable_float"))]
 div_impl_float! { f32 f64 }
 
 /// The `Rem` trait is used to specify the functionality of `%`.
@@ -457,6 +464,7 @@
 }
 
 #[cfg(not(stage0))]
+#[cfg(not(feature = "disable_float"))]
 rem_impl_float! { f32 f64 }
 
 #[stable(feature = "rust1", since = "1.0.0")]
@@ -566,7 +574,9 @@
 }
 
 // neg_impl_unsigned! { usize u8 u16 u32 u64 }
-neg_impl_numeric! { isize i8 i16 i32 i64 f32 f64 }
+neg_impl_numeric! { isize i8 i16 i32 i64 }
+#[cfg(not(feature = "disable_float"))]
+neg_impl_numeric! { f32 f64 }
 
 /// The `Not` trait is used to specify the functionality of unary `!`.
 ///
@@ -974,7 +984,9 @@
 }
 
 #[cfg(not(stage0))]
-add_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }
+add_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }
+#[cfg(not(feature = "disable_float"))]
+add_assign_impl! { f32 f64 }
 
 /// The `SubAssign` trait is used to specify the functionality of `-=`.
 ///
@@ -1023,7 +1035,9 @@
 }
 
 #[cfg(not(stage0))]
-sub_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }
+sub_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }
+#[cfg(not(feature = "disable_float"))]
+sub_assign_impl! { f32 f64 }
 
 /// The `MulAssign` trait is used to specify the functionality of `*=`.
 ///
@@ -1072,7 +1086,9 @@
 }
 
 #[cfg(not(stage0))]
-mul_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }
+mul_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }
+#[cfg(not(feature = "disable_float"))]
+mul_assign_impl! { f32 f64 }
 
 /// The `DivAssign` trait is used to specify the functionality of `/=`.
 ///
@@ -1121,7 +1137,9 @@
 }
 
 #[cfg(not(stage0))]
-div_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }
+div_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }
+#[cfg(not(feature = "disable_float"))]
+div_assign_impl! { f32 f64 }
 
 /// The `RemAssign` trait is used to specify the functionality of `%=`.
 ///
@@ -1170,7 +1188,9 @@
 }
 
 #[cfg(not(stage0))]
-rem_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }
+rem_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }
+#[cfg(not(feature = "disable_float"))]
+rem_assign_impl! { f32 f64 }
 
 /// The `BitAndAssign` trait is used to specify the functionality of `&=`.
 ///
